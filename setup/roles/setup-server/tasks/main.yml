---
# Setup Server
- name: Setup Server
  block:

    # Repos

    - name: Get Gitlab repository installation script
      get_url:
        url: https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh
        dest: /tmp/gitlab-runner.script.deb.sh
        mode: 0744

    - name: Install Gitlab repository
      command: >
        bash /tmp/gitlab-runner.script.deb.sh
      args:
        creates: /etc/apt/sources.list.d/runner_gitlab-runner.list

    - name: Add Docker's official GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      tags:
        - docker

    - name: Verify that we have the key with the fingerprint
      apt_key:
        id: 0EBFCD88
        state: present
      tags:
        - docker

    - name: Set up the Stable Docker Repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
        state: present
        update_cache: true
      tags:
        - docker

    - name: Update System
      apt:
        update_cache: true
        cache_valid_time: 86400

    # Install Gitlab Runner and docker

    - name: Set gitlab_runner_package_name
      set_fact:
        gitlab_runner_package: gitlab-runner
        gitlab_runner_package_state: latest
      when: gitlab_runner_package_version is not defined

    - name: Install Docker Packages and Docker
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - docker-ce
          - gitlab-runner
        state: present
      tags:
        - docker

    - name: Add remote user to docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: true
      tags:
        - docker

    - name: Install Docker-Compose
      get_url:
        url: https://github.com/docker/compose/releases/download/1.25.1-rc1/docker-compose-Linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: 0754

    # Install Docker Machine

    - name: Check for docker-machine binary.
      stat:
        path: /usr/local/bin/docker_machine
        follow: true
      register: dm_binary

    - name: Get docker-machine binary.
      get_url:
        url: https://github.com/docker/machine/releases/download/v0.16.1/docker-machine-{{ ansible_system }}-{{ ansible_machine }}
        dest: /usr/local/bin/docker-machine
        owner: root
        group: root
        mode: 0755
      when: not dm_binary.stat.exists|bool

    - name: Check for docker-machine bash completion.
      stat:
        path: /etc/bash_completion.d/docker
      register: dm_bash_completion

    - name: Install docker-machine bash completion.
      get_url:
        url: https://raw.githubusercontent.com/docker/docker-ce/master/components/cli/contrib/completion/bash/docker
        dest: /etc/bash_completion.d/docker
        owner: root
        group: root
        mode: 0644
      when: not dm_bash_completion.stat.exists|bool

    # Registering Gitlab Runners

    - name: List Configured Runners
      command: >
        gitlab-ci-multi-runner list
      register: configured_runners
      changed_when: false

    - name: remove config.toml file
      file:
        path: "{{ gitlab_runner_config_file }}"
        state: absent
      become: "{{ gitlab_runner_system_mode }}"

    - name: Create .gitlab-runner dir
      file:
        path: "{{ gitlab_runner_config_file_location }}"
        state: directory
        mode: 0755
      become: "{{ gitlab_runner_system_mode }}"

    - name: Register runner to GitLab
      command: >
        gitlab-runner register
        --non-interactive
        --url '{{ gitlab_runner_coordinator_url }}'
        --registration-token '{{ gitlab_runner_registration_token }}'
        --description '{{ gitlab_runner_name }}'
        --tag-list ''
        --executor '{{ gitlab_runner_executor|default("docker+machine") }}'
        --limit '{{ gitlab_runner_limit }}'
        --docker-image '{{ gitlab_runner_docker_image }}'
        --cache-s3-server-address '{{ gitlab_runner_s3_server_address|default("s3.amazonaws.com") }}'
        --cache-s3-access-key '{{ gitlab_runner_s3_access_key }}'
        --cache-s3-secret-key '{{ gitlab_runner_s3_secret_key }}'
        --cache-s3-bucket-name '{{ gitlab_runner_s3_bucket_name }}'
        --cache-s3-bucket-location '{{ gitlab_runner_s3_bucket_location }}'
        --docker-volumes '{{ gitlab_runner_docker_volume }}'
        --docker-volumes '{{ gitlab_runner_docker_volume2 }}'
        --docker-disable-cache='{{ gitlab_runner_docker_cache }}'
        --docker-privileged='{{ gitlab_runner_docker_privileged }}'
        --machine-idle-nodes '{{ gitlab_runner_idle_nodes }}'
        --machine-idle-time '{{ gitlab_runner_idle_time }}'
        --machine-max-builds '{{ gitlab_runner_max_builds }}'
        --machine-machine-driver '{{ gitlab_runner_driver }}'
        --machine-machine-name '{{ gitlab_runner_machine_name }}'
        --machine-machine-options '{{ gitlab_runner_amazonec2_access_key }}'
        --machine-machine-options '{{ gitlab_runner_amazonec2_secret_key }}'
        --machine-machine-options '{{ gitlab_runner_amazonec2_region }}'
        --machine-machine-options '{{ gitlab_runner_amazonec2_vpc }}'
        --machine-machine-options '{{ gitlab_runner_amazonec2_subnet }}'
        --machine-machine-options '{{ gitlab_runner_amazonec2_zone }}'
        --machine-machine-options '{{ gitlab_runner_amazonec2_tags }}'
        --machine-machine-options '{{ gitlab_runner_amazonec2_security_group }}'
        --machine-machine-options '{{ gitlab_runner_amazonec2_instance_type }}'
        --machine-machine-options '{{ gitlab_runner_amazonec2_spot_instance }}'
        --machine-machine-options '{{ gitlab_runner_amazonec2_spot_price }}'
        --machine-off-peak-periods '{{ gitlab_runner_off_peak_periods }}'
        --machine-off-peak-timezone '{{ gitlab_runner_off_peak_timezone }}'
        --machine-off-peak-idle-count '{{ gitlab_runner_off_peak_idlecount}}'
        --machine-off-peak-idle-time '{{ gitlab_runner_off_peak_idletime }}'
        --run-untagged='true'
        --locked='false'
        --access-level 'not_protected'
         when: configured_runners.stdout.find("{{ gitlab_runner_name }}") == -1

    - name: Restart Gitlab Runner
      service:
        name: gitlab-runner
        state: restarted

    # Install AWS CLI

    - name: Install AWS CLI
      apt:
        name: awscli
        state: latest
      tags:
        - awscli

    # AWS Configure

    - name: Set Access Key
      command: >
        aws configure set aws_access_key_id '{{ aws_access_key }}'

    - name: Set Secret Key
      command: >
        aws configure set aws_secret_access_key '{{ aws_secret_key }}'

    # Aws Login
    - name: AWS Login
      shell: >
        RESULT=$(aws ecr get-login --no-include-email --region {{ aws_region }})
        && echo $RESULT
      register: RESULT
    # Print ECR login creds
    - debug:
        var:
          RESULT.stdout_lines

    # Update apt cache

    - name: Update apt cache
      apt:
        update_cache: true
        cache_valid_time: 86400

    # Install AWS CLI

    - name: Install AWS CLI
      apt:
        name: awscli
        state: latest
      tags:
        - awscli

    # AWS Configure

    - name: Set Access Key
      command: >
        aws configure set aws_access_key_id '{{ aws_access_key }}'

    - name: Set Secret Key
      command: >
        aws configure set aws_secret_access_key '{{ aws_secret_key }}'

    # Aws Login
    - name: AWS Login
      shell: >
        RESULT=$(aws ecr get-login --no-include-email --region {{ aws_region }})
        && echo $RESULT
      register: RESULT
    # Print ECR login creds
    - debug:
        var:
          RESULT.stdout_lines
